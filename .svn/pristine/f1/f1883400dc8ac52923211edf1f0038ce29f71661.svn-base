package com.softspace.pos.controller;

import java.io.IOException;
import java.util.UUID;

import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.commons.lang.RandomStringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.util.StringUtils;

import com.softspace.pos.DAO.PosUserDAO;
import com.softspace.pos.DTO.JSONDTO;
import com.softspace.pos.DTO.JSONServiceDTO;
import com.softspace.pos.DTO.JSONServiceError;
import com.softspace.pos.bean.PosUser;
import com.softspace.pos.enums.ErrorStatus;
import com.softspace.pos.enums.ServiceNames;
import com.softspace.pos.exceptions.SSPosMobileRequestException;
import com.softspace.pos.exceptions.SSRecoverableException;
import com.softspace.pos.exceptions.SessionTimedOutException;
import com.softspace.pos.service.SessionService;
import com.softspace.pos.util.JSONConverter;
import com.softspace.pos.util.JSONFactory;

public abstract class AbstractController {

	@Autowired
	private PosUserDAO posUserDAO;

	@Autowired
	private SessionService sessionService;

	public enum SESSION_KEYS {
		KEY_PAIRS, SENDER_PUBLIC_KEY, CURRENT_LOGIN_STAFF
	}

	public static final String COOKIE_NAME = "ztoken";

	private static final Logger logger = LoggerFactory.getLogger(AbstractController.class);

	/**
	 * Perform checking if the service requested is valid
	 * 
	 * @param dto
	 * @return ServiceNames
	 * @throws SSPosMobileRequestException if service name is invalid
	 */
	protected ServiceNames extractServiceName(final JSONServiceDTO dto) throws SSPosMobileRequestException {
		String serviceNameString = null;
		try {
			serviceNameString = dto.getServiceName();
			if (!StringUtils.hasText(serviceNameString)) {
				// no text?
				throw new IllegalArgumentException("invalid service name");
			}
			return ServiceNames.valueOf(serviceNameString);
		} catch (IllegalArgumentException e) {
			String msg = "service name : " + serviceNameString + " is not found";
			logger.error(msg, e);

			throw new SSPosMobileRequestException(ErrorStatus.ERROR_SERVICE_NOT_FOUND, msg);
		}
	}

	protected String generateAndSetSessionKey(final JSONServiceDTO dto) {
		String sessionKey = generateSessionKey();

		// set session key into dto
		dto.setSessionKey(sessionKey);

		return sessionKey;
	}

	protected String generateSessionKey() {
		// generate new session key
		return UUID.randomUUID().toString();
	}

	/**
	 * Sends the response back to the client. Phase 1,publicKey no encryption needed
	 */
	protected void flushResponse(final HttpServletResponse response, final JSONServiceDTO respObj) throws SSRecoverableException,
			SSPosMobileRequestException, Exception {
		try {
			JSONDTO respMObj = JSONConverter.toMobile(respObj);
			String responseJSON = JSONFactory.toJson(respMObj);

			logger.debug("\nJSON to return to mobile app: {}", responseJSON);

			response.setContentType("text/plain");
			response.getWriter().println(responseJSON);
			response.flushBuffer();

			response.getWriter().println("   ");
			response.flushBuffer();
		} catch (IOException e) {
			throw new SSRecoverableException(ErrorStatus.ERROR_CLIENT_DISCONNECTED.getCode(),
					ErrorStatus.ERROR_CLIENT_DISCONNECTED.getDefaultMessage());
		} catch (SSPosMobileRequestException e) {
			throw new SSPosMobileRequestException(e.getErrorStatus(), e.getMessage());
		}
	}

	protected void checkCookie(final HttpServletRequest request, final HttpServletResponse response) throws SessionTimedOutException {
		String sessionCookieValue = null;

		// check cookie in session if it is valid
		if (request.getSession() == null) {
			handleSessionTimedOut(request, response);
		}

		// get the cookie name from session
		sessionCookieValue = (String) request.getSession().getAttribute(COOKIE_NAME);
		if ((sessionCookieValue == null)) {
			logger.error("No cookie in session, sessionCookieName: {}, sessionCookieValue: {}", COOKIE_NAME, sessionCookieValue);

			handleSessionTimedOut(request, response);
		}

		// find the cookie
		Cookie[] cookies = request.getCookies();
		Cookie cookieFound = null;
		if (cookies != null) {
			for (Cookie c : cookies) {
				if (COOKIE_NAME.equals(c.getName()) && StringUtils.hasText(c.getValue())) {
					cookieFound = c;
					break;
				}
			}
		}
		if (cookieFound == null) {
			handleSessionTimedOut(request, response);
		}

		// throw a timed out exception if the cookie value is invalid (different)
		if (sessionCookieValue.equals(cookieFound.getValue()) == false) {
			logger.debug("Timed out! sessionCookieValue: {} vs the cookie found {}", sessionCookieValue, cookieFound.getValue());

			handleSessionTimedOut(request, response);
		}

		cookieFound.setPath("/");
		cookieFound.setMaxAge(0);
		cookieFound.setValue(null);
		cookieFound.setSecure(false);
		response.addCookie(cookieFound);
	}

	protected Cookie generateAndSetCookie(final HttpServletResponse response) throws SessionTimedOutException {
		Cookie cookie = generateCookie();

		// set the cookie into the response
		response.addCookie(cookie);

		return cookie;
	}

	protected Cookie generateCookie() throws SessionTimedOutException {
		String newCookieValue;

		// TODO try {
		// newCookieValue = "131312312321";// EncryptionUtil.genRandomNumber();
		// } catch (NoSuchAlgorithmException e) {
		// throw new SessionTimedOutException(ErrorStatus.UNHANDLED_ERROR.getCode(), "Cookie " + COOKIE_NAME + " could not be created");
		// }
		newCookieValue = RandomStringUtils.randomNumeric(15);
		Cookie userCookie = new Cookie(COOKIE_NAME, newCookieValue);
		userCookie.setPath("/");
		userCookie.setMaxAge(3600);
		userCookie.setSecure(false);

		logger.debug("New cookie value for cookie {}: {}", COOKIE_NAME, newCookieValue);

		return userCookie;
	}

	protected void setCookieToSession(final HttpSession session, final Cookie cookie) {
		session.setAttribute(COOKIE_NAME, cookie.getValue());
	}

	// what is the use?
	private JSONServiceDTO handleException(final ErrorStatus type, final String serviceName) {
		JSONServiceDTO jsonToReturn = new JSONServiceDTO();
		if (serviceName != null) {
			jsonToReturn.setServiceName(serviceName);
		}

		// TODO i18n the messages
		jsonToReturn.setError(new JSONServiceError(type.getCode(), type.getDefaultMessage()));

		return jsonToReturn;
	}

	protected void handleSessionTimedOut(final HttpServletRequest request, final HttpServletResponse response)
			throws SessionTimedOutException {
		response.setStatus(HttpServletResponse.SC_REQUEST_TIMEOUT);

		if (request.getSession() != null) {
			request.getSession().invalidate();
		}

		throw new SessionTimedOutException(ErrorStatus.SESSION_TIMED_OUT.getCode(), ErrorStatus.SESSION_TIMED_OUT.getDefaultMessage());
	}

	// set current user into the enum into the session so that in the future we can validate
	protected void persistToSession(final JSONServiceDTO dto, final HttpServletRequest request, final String userEmail) {
		PosUser staff = posUserDAO.getUserByEmail(userEmail);
		request.getSession(true).setAttribute(SESSION_KEYS.CURRENT_LOGIN_STAFF.name(), staff);
	}

	protected void verifySessionData(final PosUser staff, final HttpServletRequest request, final JSONServiceDTO dto)
			throws SSPosMobileRequestException {

		final PosUser sStaff = (PosUser) request.getSession(true).getAttribute(SESSION_KEYS.CURRENT_LOGIN_STAFF.name());
		// validate merchant ID and reader serial number before hand
		// check that against the value in session
		// invalidate the session, throw exception if invalid

		if (!StringUtils.hasText(dto.getEmail()) || !dto.getEmail().equals(staff.getEmail())
				|| !sStaff.getEmail().equalsIgnoreCase(staff.getEmail())) {

			request.getSession(true).invalidate();

			logger.info("session timed out due to invalid session information!");
			if (logger.isDebugEnabled()) {
				StringBuilder sb = new StringBuilder();
				sb.append("Value in REQUEST vs value in SESSION /DB");
				sb.append(String.format("\nStaff - %s - %s", sStaff.getEmail(), staff.getEmail()));
				logger.debug(sb.toString());
			}
			throw new SSPosMobileRequestException(ErrorStatus.SESSION_TIMED_OUT,
					"session is timed out due to invalid session information or timedout");
		}
	}

	// TODO big badass todo here, session, cookie management, refer mPOS
	protected void setSessionKeyToSession(final HttpSession session, final String sessionKey) {
		SessionService.getInstance().setNewKey(session, sessionKey);
		// session.setAttribute(SESSION_KEYS.SESSION_ID.name(), sessionKey);
	}

	protected void checkSessionKey(final JSONServiceDTO dto, final HttpServletRequest request, final HttpServletResponse response)
			throws SessionTimedOutException {
		// System.out.println("checkSessionKey::" + request.getSession(true).getAttributeNames());
		// request.getSession(true).setAttribute(SESSION_KEYS.CURRENT_LOGIN_STAFF.name(), posUserDAO.getUserByEmail(dto.getEmail()));
		String sessionKey = sessionService.getSessionKey(request.getSession());

		if (!isSessionKeyValid(sessionKey, dto.getSessionKey())) {
			logger.error("Session keys don't match: {}", dto.getSessionKey());
			handleSessionTimedOut(request, response);
		}
	}

	private boolean isSessionKeyValid(final String sessionKeyFromSession, final String sessionKeyFromJSON) {
		boolean isSessionKeyValid = false;

		if (StringUtils.hasText(sessionKeyFromSession) && (sessionKeyFromSession.equalsIgnoreCase(sessionKeyFromJSON))) {
			isSessionKeyValid = true;
		} else {
			logger.error("Session keys in session and JSON don't match");
		}

		return isSessionKeyValid;
	}
}
