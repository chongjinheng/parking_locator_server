package com.softspace.test.service;

import java.util.ArrayList;
import java.util.List;

import org.junit.Assert;
import org.junit.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;

import com.softspace.pos.DAO.DiscountDAO;
import com.softspace.pos.DTO.JSONServiceDTO;
import com.softspace.pos.bean.CartItem;
import com.softspace.pos.bean.Discount;
import com.softspace.pos.bean.Sales;
import com.softspace.pos.service.SalesService;
import com.softspace.test.controller.BaseTestCase;

/**
 * A unit test for MobileRequestController.<br/>
 * In this unit test, we can test a mobile service requested from mobile app.
 * 
 * @author chongjinheng
 */
public class SalesServiceTest extends BaseTestCase {

	@Autowired
	private SalesService salesService;

	@Autowired
	private DiscountDAO discountDAO;

	@Value("${productID}")
	private String productID;

	@Value("${quantity}")
	private String quantity;

	@Value("${storeID}")
	private Long storeID;

	@Value("${userEmail}")
	private String userEmail;

	@Value("${productName}")
	private String productName;

	@Value("${code}")
	private String productCode;

	@Value("${description}")
	private String productDescription;

	@Value("${price}")
	private Long productPrice;

	@Value("${productImage}")
	private String productImage;

	@Value("${subTotalAmount}")
	private String subTotalAmount;

	@Value("${totalAmount}")
	private String totalAmount;

	@Value("${discountAmount}")
	private String discountAmount;

	@Value("${tenderAmount}")
	private String tenderAmount;

	@Value("${changeAmount}")
	private String changeAmount;

	@Value("${receiptNumber}")
	private String receiptNumber;

	@Value("${discountID}")
	private Long discountID;

	@Value("${type}")
	private String type;

	@Value("${firstTimeSignupEmail}")
	private String email;

	@Value("${salesID}")
	private Long salesID;

	JSONServiceDTO dto = new JSONServiceDTO();

	@Test
	public void testDoConfirmSales() throws Exception {
		/** Object required for doConfirmSale **/
		List<CartItem> cartList = new ArrayList<CartItem>();

		String tempProductID = productID;
		String tempQuantity = quantity;
		String[] tempProductIDStore = tempProductID.split(",");
		String[] tempQuantityStore = tempQuantity.split(",");

		for (int i = 0; i < tempProductIDStore.length; i++) {
			CartItem cI = new CartItem();
			cI.setProductID(Long.valueOf(tempProductIDStore[i]));
			cI.setQuantity(Integer.valueOf(tempQuantityStore[i]));
			cartList.add(cI);
		}

		Double subTotalAmount2 = Double.valueOf(subTotalAmount) * 100;
		Double totalAmount2 = Double.valueOf(totalAmount) * 100;
		Double discountAmount2 = Double.valueOf(discountAmount) * 100;
		Double tenderAmount2 = Double.valueOf(tenderAmount) * 100;
		Double changeAmount2 = Double.valueOf(changeAmount) * 100;
		Discount discount = new Discount();
		discount = discountDAO.getDiscountById(discountID, storeID);

		dto = salesService.doConfirmSale(userEmail, storeID, type, subTotalAmount2.longValue(), totalAmount2.longValue(),
				discountAmount2.longValue(), tenderAmount2.longValue(), changeAmount2.longValue(), discount, cartList);
		Assert.assertNotNull("sales id is not returned", dto.getSalesId());
		Assert.assertNotNull("receipt number is not returned", dto.getReceiptNumber());
	}

	@Test
	public void testDoSendReceipt() throws Exception {
		dto = salesService.doSendReciept(userEmail, storeID, email, salesID);
	}

	@Test
	public void testGetSalesHistory() throws Exception {
		dto = salesService.getSalesHistory(userEmail, storeID);
		List<Sales> salesHistoryList = dto.getSalesHistoryList();
		Assert.assertTrue("sales history list is empty", salesHistoryList.size() > 0);
	}

	@Test
	public void testGetSalesHistoryDetails() throws Exception {
		dto = salesService.getSalesHistoryDetails(userEmail, storeID, salesID);

		List<CartItem> cartList = dto.getCartList();
		Assert.assertNotNull("sales id is not returned", dto.getSalesId());
		Assert.assertNotNull("receipt number is not returned", dto.getReceiptNumber());
		Assert.assertNotNull("payment type is not returned", dto.getPaymentType());
		Assert.assertNotNull("transaction date is not returned", dto.getTransactionDate());
		Assert.assertNotNull("sub total amount is not returned", dto.getSubTotalAmount());
		Assert.assertNotNull("total amount is not returned", dto.getTotalAmount());
		// Assert.assertNotNull("discount amount is not returned", dto.getDiscountAmount());
		Assert.assertTrue("cart list is empty", cartList.size() > 0);
	}
}
