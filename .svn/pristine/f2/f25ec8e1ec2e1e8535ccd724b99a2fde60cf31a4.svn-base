package com.softspace.pos.service;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.apache.commons.lang.RandomStringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.softspace.pos.DAO.CrudDAO;
import com.softspace.pos.DAO.ForgotPasswordSessionDAO;
import com.softspace.pos.DAO.PosUserDAO;
import com.softspace.pos.DAO.SalesRunningNumberDAO;
import com.softspace.pos.DAO.StoreDAO;
import com.softspace.pos.DTO.JSONServiceDTO;
import com.softspace.pos.bean.PosUser;
import com.softspace.pos.bean.Store;
import com.softspace.pos.enums.ErrorStatus;
import com.softspace.pos.exceptions.SSPosMobileRequestException;
import com.softspace.pos.util.EmailService;
import com.softspace.pos.util.Encryptor;
import com.softspace.pos.util.Validators;

/**
 * Pos User Services
 * 
 * @author Darren
 * @author chengyang
 */
@Service
public class PosUserServiceImpl implements PosUserService {

	private static final Logger logger = LoggerFactory.getLogger(PosUserServiceImpl.class);

	@SuppressWarnings("rawtypes")
	@Autowired
	private CrudDAO crudDAO;

	@Autowired
	private PosUserDAO posUserDAO;

	@Autowired
	private StoreDAO storeDAO;

	@Autowired
	private ForgotPasswordSessionDAO forgetPasswordSessionDAO;

	@Autowired
	private SalesRunningNumberDAO salesRunningNumberDAO;

	@Override
	@Transactional(rollbackFor = Exception.class)
	public JSONServiceDTO doSignUp(String storeName, String email, String password) throws Exception {

		JSONServiceDTO outService = new JSONServiceDTO();
		try {
			/** Sanity Check **/
			email = email.trim();
			password = password.trim();
			storeName = storeName.trim();
			Validators.sanityCheck(email);
			Validators.sanityCheck(password);
			Validators.sanityCheck(storeName);

			String encryptedPass = Encryptor.hashPassword(password, email);

			// check for format
			if (!Validators.validateEmail(email)) {
				throw new SSPosMobileRequestException(ErrorStatus.EMAIL_STYLE_ERROR, ErrorStatus.EMAIL_STYLE_ERROR.getDefaultMessage());
			}

			if (posUserDAO.getUserByEmail(email) != null) {
				throw new SSPosMobileRequestException(ErrorStatus.EMAIL_EXISTS, ErrorStatus.EMAIL_EXISTS.getDefaultMessage());
			}

			if (!(Validators.checkPasswordStyle(password) && password.length() >= 8 && password.length() <= 15)) {
				throw new SSPosMobileRequestException(ErrorStatus.PASSWORD_STYLE_ERROR,
						ErrorStatus.PASSWORD_STYLE_ERROR.getDefaultMessage());
			}

			Long storeID = storeDAO.createStore(storeName, email);
			outService.setStoreId(storeID);
			logger.info("Store created successfully");

			salesRunningNumberDAO.createSalesRunningNumber(storeID);
			logger.info("A Running Number that is dedicated to the store is created successfully");

			posUserDAO.createPosUser(email, encryptedPass, storeID);

			List<String> info = new ArrayList<String>();
			info.add(storeName);
			EmailService.sendEmail(email, 101, info);
			logger.info("User created sucessfully");

		} catch (Exception e) {
			logger.error("Exception in doSignUp" + e);
			throw e;
		}
		return outService;
	}

	@Override
	@Transactional(rollbackFor = Exception.class)
	public JSONServiceDTO doLogIn(String email, String password) throws Exception {

		JSONServiceDTO outService = new JSONServiceDTO();
		try {
			/** Sanity Check **/
			email = email.trim();
			password = password.trim();
			Validators.sanityCheck(email);
			Validators.sanityCheck(password);

			PosUser posUser = posUserDAO.getUserByEmail(email);

			if (posUser == null) {
				throw new SSPosMobileRequestException(ErrorStatus.USER_DOES_NOT_EXIST, ErrorStatus.USER_DOES_NOT_EXIST.getDefaultMessage());
			}

			// if password not same with the main password
			if (!(Validators.validatePassword(password, posUser.getPassword(), email))) {
				// check if there is an temporary password
				// if temp password doesnt exists
				if (posUser.getForgetPasswordSession() == null) {
					throw new SSPosMobileRequestException(ErrorStatus.VALIDATION_ERROR, ErrorStatus.VALIDATION_ERROR.getDefaultMessage());
				}
				// if temp password exists
				else if (!(posUser.getForgetPasswordSession() == null)) {
					// temp pass doesnt match
					if (!(Validators.validatePassword(password, posUser.getForgetPasswordSession().getTempPassword(), email))) {
						throw new SSPosMobileRequestException(ErrorStatus.VALIDATION_ERROR,
								ErrorStatus.VALIDATION_ERROR.getDefaultMessage());
					}
					// temp pass matches //then login
					else {
						// TODO forgot pass should die soon
						// check validity of the date
						Date curDate = new Date();
						Date passDate = posUser.getForgetPasswordSession().getValidTillDate();
						if (curDate.after(passDate)) {
							throw new SSPosMobileRequestException(ErrorStatus.PASSWORD_EXPIRED_ERROR,
									ErrorStatus.PASSWORD_EXPIRED_ERROR.getDefaultMessage());
						} // if temp password has already been used
						else if (posUser.getForgetPasswordSession().getDeleteFlag() == true) {
							logger.info("Temporary Password has already been used");
							throw new SSPosMobileRequestException(ErrorStatus.PASSWORD_EXPIRED_ERROR,
									ErrorStatus.PASSWORD_EXPIRED_ERROR.getDefaultMessage());
						} else {
							logger.info("Logged in using temp password");
							outService.setLoginMode(10);
							return outService;
						}

					}
				}
			} else if ((Validators.validatePassword(password, posUser.getPassword(), email))) {
				outService.setLoginMode(20);
				logger.info("Logged in using normal password");

				outService.setStoreId(posUser.getStore().getID());
				outService.setUserProfile(posUser.getStore());
				return outService;
			}

		} catch (Exception e) {
			logger.error("Exception in doLogIn" + e);
			throw e;
		}
		return outService;
	}

	@Override
	@Transactional(rollbackFor = Exception.class)
	// TODO changed it to longer PASSWORD
	public JSONServiceDTO doForgotPass(String email) throws Exception {

		JSONServiceDTO outService = new JSONServiceDTO();
		try {
			/** Sanity Check **/
			email = email.trim();
			Validators.sanityCheck(email);

			PosUser posUser = posUserDAO.getUserByEmail(email);

			if (posUser == null) {
				throw new SSPosMobileRequestException(ErrorStatus.APPLICATION_MERCHANT_NON_EXISTENCE,
						ErrorStatus.APPLICATION_MERCHANT_NON_EXISTENCE.getDefaultMessage());
			}

			// TODO cy you decide tempP
			String tempP = RandomStringUtils.randomAlphanumeric(8);
			// TODO cy, here decide again haha
			String encryptedTempPass = Encryptor.hashPassword(tempP, email);
			// if there is no previous record of forgot_session
			if (posUser.getForgetPasswordSession() == null) {

				// TODO don't hardcode this date, should inject fun stuff
				// TODO ASK

				Long fpSessionID = forgetPasswordSessionDAO.createForgetPasswordSession(email, encryptedTempPass);

				posUserDAO.updatePosUserForgetPasswordSession(email, fpSessionID);

				logger.info("posUser forgotPassSession changed");

				logger.info("Temp Password created successfully");

			} // if there is previous record
			else if (posUser.getForgetPasswordSession() != null) {

				forgetPasswordSessionDAO.updateForgetPasswordSession(encryptedTempPass, email);
				logger.info("Temp Password updated");

			} else {
				logger.error("Exception in forgot pass creating tempPass");
				throw new SSPosMobileRequestException(ErrorStatus.UNHANDLED_ERROR, ErrorStatus.UNHANDLED_ERROR.getDefaultMessage());

			}
			List<String> info = new ArrayList<String>();
			info.add(tempP);
			EmailService.sendEmail(email, 102, info);

		} catch (Exception e) {
			logger.info("Exception in doForgotPass" + e);
			throw e;
		}
		return outService;

	}

	@Override
	@Transactional(rollbackFor = Exception.class)
	public JSONServiceDTO doChangePass(String email, String oldPassword, String newPassword, Boolean isForceChangePassword)
			throws Exception {

		JSONServiceDTO outService = new JSONServiceDTO();
		try {
			/** Sanity Check **/
			oldPassword = oldPassword.trim();
			newPassword = newPassword.trim();
			email = email.trim();
			Validators.sanityCheck(email);
			Validators.sanityCheck(oldPassword);
			Validators.sanityCheck(newPassword);

			PosUser posUser = posUserDAO.getUserByEmail(email);

			if (!Validators.checkPasswordStyle(newPassword) && newPassword.length() >= 8 && newPassword.length() <= 15) {
				throw new SSPosMobileRequestException(ErrorStatus.PASSWORD_STYLE_ERROR,
						ErrorStatus.PASSWORD_STYLE_ERROR.getDefaultMessage());
			} // if it is called from entering a temporary password
			else if (isForceChangePassword == true) {
				if (posUser.getForgetPasswordSession() == null) {
					throw new SSPosMobileRequestException(ErrorStatus.APPLICATION_MERCHANT_NON_EXISTENCE,
							ErrorStatus.APPLICATION_MERCHANT_NON_EXISTENCE.getDefaultMessage());
				}

				// if (Validators.validatePassword(oldPassword, posUser.getForgetPasswordSession().getTempPassword(), email)) {
				// posUser.setPassword(Encryptor.encryptPass(newPassword, email));
				// posUser.setModifiedDate(new Date());
				// posUser.setModifiedBy(email);
				// crudDAO.update(posUser);
				String newHashedPassword = Encryptor.hashPassword(newPassword, email);

				posUserDAO.updatePosUserPassword(email, newHashedPassword);

				// ForgetPasswordSession forgotPassSession = posUser.getForgetPasswordSession();
				// forgotPassSession.setDeleteFlag(true);
				// crudDAO.update(forgotPassSession);

				forgetPasswordSessionDAO.deleteForgetPasswordSession(email);

				logger.info("Password Changed");
				logger.info("Force password = true, Store is returned");
				List<String> info = new ArrayList<String>();
				info.add("");
				EmailService.sendEmail(email, 103, info);
				outService.setUserProfile(posUser.getStore());

				// } else
				// throw new SSPosMobileRequestException(ErrorStatus.VALIDATION_ERROR, ErrorStatus.VALIDATION_ERROR.getDefaultMessage());
			} else if (oldPassword.equals(newPassword)) {
				throw new SSPosMobileRequestException(ErrorStatus.PASSWORD_REQ_ERROR, ErrorStatus.PASSWORD_REQ_ERROR.getDefaultMessage());
			} else if (Validators.validatePassword(oldPassword, posUser.getPassword(), email)) {

				// posUser.setModifiedDate(new Date());
				// posUser.setModifiedBy(email);
				// crudDAO.update(posUser);

				String newHashedPassword = Encryptor.hashPassword(newPassword, email);
				posUserDAO.updatePosUserPassword(email, newHashedPassword);
				logger.info("Password Changed");

				List<String> info = new ArrayList<String>();
				info.add("");
				EmailService.sendEmail(email, 103, info);
			} else {
				throw new SSPosMobileRequestException(ErrorStatus.VALIDATION_ERROR, ErrorStatus.VALIDATION_ERROR.getDefaultMessage());
			}
		} catch (Exception e) {
			logger.error("Exception in doChangePass" + e);
			throw e;
		}
		return outService;

	}

	@Override
	@Transactional(rollbackFor = Exception.class)
	public JSONServiceDTO doUpdateProfile(String email, Long storeId, String storeName, String storeImage) throws Exception {
		JSONServiceDTO outService = new JSONServiceDTO();
		try {
			/** Sanity Check **/
			storeName = storeName.trim();
			email = email.trim();
			Validators.sanityCheck(email);
			Validators.sanityCheck(storeName);

			PosUser posUser = posUserDAO.getUserByEmail(email);
			Store store = new Store();

			if (posUser != null) {
				store = posUser.getStore();
				if (store == null) {
					throw new SSPosMobileRequestException(ErrorStatus.NULL_FIELD_ERROR, ErrorStatus.NULL_FIELD_ERROR.getDefaultMessage()
							+ " :user dont have store");
				} else if (store.getID() != storeId) {
					throw new SSPosMobileRequestException(ErrorStatus.AUTHORIZATION_ERROR,
							ErrorStatus.AUTHORIZATION_ERROR.getDefaultMessage());
				}
			} else {
				throw new SSPosMobileRequestException(ErrorStatus.NULL_FIELD_ERROR, ErrorStatus.NULL_FIELD_ERROR.getDefaultMessage()
						+ " :user not registered");
			}

			storeDAO.updateUserProfile(email, storeName, storeImage);
			logger.info("Profile updated successfully");
		} catch (Exception e) {
			logger.error("Exception in doUpdateProfile");
			throw e;
		}
		return outService;
	}
}
