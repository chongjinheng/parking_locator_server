package com.softspace.pos.service;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;

import org.apache.commons.lang.time.DateUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.StringUtils;

import com.softspace.pos.DAO.CrudDAO;
import com.softspace.pos.DAO.DiscountDAO;
import com.softspace.pos.DAO.PosUserDAO;
import com.softspace.pos.DAO.ProductDAO;
import com.softspace.pos.DAO.SalesDAO;
import com.softspace.pos.DAO.SalesRunningNumberDAO;
import com.softspace.pos.DTO.JSONServiceDTO;
import com.softspace.pos.bean.CartItem;
import com.softspace.pos.bean.Discount;
import com.softspace.pos.bean.PosUser;
import com.softspace.pos.bean.Product;
import com.softspace.pos.bean.Sales;
import com.softspace.pos.bean.SalesRunningNumber;
import com.softspace.pos.bean.Store;
import com.softspace.pos.enums.ErrorStatus;
import com.softspace.pos.exceptions.SSPosMobileRequestException;
import com.softspace.pos.util.EmailSetup;
import com.softspace.pos.util.Validators;

/**
 * Sales Services
 * 
 * @author cylim
 */
@Service
public class SalesServiceImpl implements SalesService {

	private static final Logger logger = LoggerFactory.getLogger(PosUserServiceImpl.class);

	@SuppressWarnings("rawtypes")
	@Autowired
	private CrudDAO crudDAO;

	@Autowired
	private PosUserDAO posUserDAO;

	@Autowired
	private ProductDAO productDAO;

	@Autowired
	private SalesDAO salesDAO;

	@Autowired
	private DiscountDAO discountDAO;

	@Autowired
	private SalesRunningNumberDAO salesRunningNumberDAO;

	@Override
	@Transactional(rollbackFor = Exception.class)
	public JSONServiceDTO doConfirmSale(String email, Long storeID, Integer paymentType, Long subTotalAmount, Long totalAmount,
			Long discountAmount, Long tenderAmount, Long changeAmount, Discount discountPackage, List<CartItem> cartList) throws Exception {

		JSONServiceDTO outService = new JSONServiceDTO();
		/** Sanity Check **/

		try {
			email = email.trim();
			Validators.sanityCheck(email);
			Validators.sanityCheck(storeID);
			Validators.sanityCheck(paymentType);
			Validators.sanityCheck(subTotalAmount);
			Validators.sanityCheck(totalAmount);
			Validators.sanityCheck(tenderAmount);
			Validators.sanityCheck(changeAmount);
			if (cartList.size() == 0)
				throw new SSPosMobileRequestException(ErrorStatus.NULL_FIELD_ERROR, ErrorStatus.NULL_FIELD_ERROR.getDefaultMessage()
						+ " :Transaction Details");
			if (!(discountAmount == null) && discountPackage == null)
				throw new SSPosMobileRequestException(ErrorStatus.NULL_FIELD_ERROR, ErrorStatus.NULL_FIELD_ERROR.getDefaultMessage()
						+ " : Diacount Package ");
			if (!(discountPackage == null) && discountAmount == null)
				throw new SSPosMobileRequestException(ErrorStatus.NULL_FIELD_ERROR, ErrorStatus.NULL_FIELD_ERROR.getDefaultMessage()
						+ " : Diacount Amount ");

			Sales sales = new Sales();
			// add in amounts
			sales.setPaymentType(paymentType);
			sales.setChangeAmount(changeAmount);
			sales.setCreatedBy(email);
			sales.setTransactionDate(new Date());
			sales.setCreatedDate(new Date());

			PosUser posUser1 = new PosUser();
			posUser1 = posUserDAO.getUserByEmail(email);

			// check if discountPackage exists or not
			if (discountPackage != null) {
				// if it is a custom discount
				Long i = 0l;
				if (discountPackage.getId() == 0l) {
					Discount discount = new Discount();
					discount.setCustom(true);
					discount.setName(discountPackage.getName());
					discount.setCreatedDate(new Date());
					discount.setCreatedBy(email);
					discount.setType(discountPackage.getType());
					discount.setValue(discountPackage.getValue());
					discount.setStore(posUser1.getStore());
					i = crudDAO.create(discount);
					logger.info("A CUSTOM discount is created");
					sales.setDiscount(discountDAO.getDiscountById(i, storeID));
				} else { // if not custom amount

					// check if the discount is from correct store
					Discount discount = new Discount();
					discount = discountDAO.getDiscountById(discountPackage.getId(), storeID);

					if (!(discount == null))
						sales.setDiscount(discountPackage);
					else
						throw new SSPosMobileRequestException(ErrorStatus.TARGET_MISMATCHED_ERROR,
								ErrorStatus.TARGET_MISMATCHED_ERROR.getDefaultMessage());
				}
			}

			if (!(discountAmount == null))
				sales.setDiscountAmount(discountAmount);
			sales.setSubTotalAmount(subTotalAmount);
			sales.setTotalAmount(totalAmount);
			sales.setTenderAmount(tenderAmount);
			// pull store out from user's email
			PosUser posUser = new PosUser();
			posUser = posUserDAO.getUserByEmail(email);

			Store store = new Store();
			store = posUser.getStore();
			sales.setStore(store);

			// pull SalesRunningNumber out from store
			SalesRunningNumber salesRunningNumber = new SalesRunningNumber();
			salesRunningNumber = salesRunningNumberDAO.getSalesRunningNumberByStoreId(storeID);

			Date curDate = new Date();
			long curRunningNumber = 0;
			// System.out.println("RUNNING NUMBER BEFORE : " + salesRunningNumber.getRunningNumber());
			// check if it is the same date
			if (!(DateUtils.isSameDay(curDate, salesRunningNumber.getCurDate()))) {
				// if currently is a new day, replace it with the current date
				salesRunningNumber.setCurDate(curDate);
				// set to 1 as it includes the current transaction
				salesRunningNumber.setRunningNumber(1);
				crudDAO.update(salesRunningNumber);
				curRunningNumber = 1;
			} else if ((DateUtils.isSameDay(curDate, salesRunningNumber.getCurDate()))) {
				// if currently is still same with the latest record
				// running number +1;
				int tempSRN = salesRunningNumber.getRunningNumber() + 1;
				salesRunningNumber.setRunningNumber(tempSRN);
				// set for usage
				curRunningNumber = (long) tempSRN;
				crudDAO.update(salesRunningNumber);

			}
			// TODO REFINE AFTER EXCEPION
			// else {
			// throw new SSPosMobileRequestException(ErrorStatus.RUNNING_NO_DATE_ERROR,
			// ErrorStatus.RUNNING_NO_DATE_ERROR.getDefaultMessage() + " :date is weird");
			// }

			Calendar tempCal = Calendar.getInstance();
			int tempDate = tempCal.get(Calendar.DAY_OF_MONTH);
			int tempMonth = tempCal.get(Calendar.MONTH) + 1;
			int tempYear = tempCal.get(Calendar.YEAR) % 100;

			long yymmdd = tempYear * (long) Math.pow(10, 16) + tempMonth * (long) Math.pow(10, 14) + tempDate * (long) Math.pow(10, 12);
			long receiptNo = yymmdd + storeID * (long) Math.pow(10, 6) + curRunningNumber;

			// insert receipt number
			sales.setReceiptNumber(String.valueOf(receiptNo));
			// create sales
			@SuppressWarnings("unused")
			long tempSalesID = crudDAO.create(sales);

			// prepare a empty list to put in the collections of cartItem
			// List<CartItem> cartItemBundle = new ArrayList<CartItem>();

			// A string to put in all the wrong/non-existsing product id
			String nullProductID = "ProductID -> ";
			Boolean errorExists = false;

			// creates cartItem individually
			for (CartItem cI : cartList) {
				CartItem cartItem = new CartItem();

				cartItem.setCreatedBy(email);
				cartItem.setCreatedDate(new Date());
				// TODO ask if need to check for id
				// 1st, check if it is not a custom amount
				if (cI.getProductID() == 0l) {
					// if it is a custom amount, do check for customAmount and description
					String cusAmtDescription = cI.getCustomAmountDescription().trim();
					if (cI.getCustomAmountDescription() == null || cI.getCustomAmount() == null || StringUtils.isEmpty(cusAmtDescription))
						throw new SSPosMobileRequestException(ErrorStatus.NULL_FIELD_ERROR,
								ErrorStatus.NULL_FIELD_ERROR.getDefaultMessage() + " :field is missing for custom product.");
					// if its not null add it into cartItem
					cartItem.setProductID(0l);
					cartItem.setProductCode("**NO-CODE**");
					cartItem.setProductName("**CUSTOM**");
					cartItem.setAmount(cI.getCustomAmount());
					cartItem.setCustomAmountDescription(cusAmtDescription);
					cartItem.setQuantity(cI.getQuantity());
				} else {
					// get product object from productID from cartlist
					Product product = new Product();

					// retrieve productID from transient-typed productID in cartlist and assign into product
					// Check if the product is from the correct shop
					product = productDAO.getProductById(cI.getProductID(), storeID);

					// check for sanity of product
					if (product == null) {
						errorExists = true;
						nullProductID += String.valueOf(cI.getProductID()) + " ";
					} else {
						// assign product into cartItem
						cartItem.setProductID(product.getId());
						cartItem.setQuantity(cI.getQuantity());
						cartItem.setProductCode(product.getCode());
						cartItem.setProductName(product.getName());
						// calculate for total amount for the product and set
						float totalQ = 0;
						totalQ = product.getPrice() * cI.getQuantity();
						cartItem.setAmount(totalQ);
					}

				}

				if (errorExists) {
					throw new SSPosMobileRequestException(ErrorStatus.TARGET_ITEM_NOT_EXIST,
							ErrorStatus.TARGET_ITEM_NOT_EXIST.getDefaultMessage() + " :product does not exists, " + nullProductID);
				}
				cartItem.setSales(sales);
				crudDAO.create(cartItem);
				// after done creating add it into the list for later add all into sales
				// cartItemBundle.add(cartItem);

			}
			// add in the whole list to the sales

			Long temporarySalesID = crudDAO.create(sales);

			// sales.setCartItem(cartItemBundle);
			outService.setReceiptNumber(String.valueOf(receiptNo));
			outService.setSalesId(temporarySalesID);

		} catch (Exception e) {
			logger.error("Exception in confirmSales" + e);
			throw e;
		}

		return outService;
	}

	@Override
	@Transactional(rollbackFor = Exception.class)
	public JSONServiceDTO doSendReciept(String email, Long storeID, String customerEmail, Long salesID) throws Exception {

		JSONServiceDTO outService = new JSONServiceDTO();
		customerEmail = customerEmail.trim();
		email = email.trim();

		System.out.println(email + " " + customerEmail);

		/** Sanity Check **/
		Validators.sanityCheck(customerEmail);
		Validators.sanityCheck(email);
		Validators.sanityCheck(storeID);
		Validators.sanityCheck(salesID);

		if (storeID == 0 || salesID == 0)
			throw new SSPosMobileRequestException(ErrorStatus.TARGET_ITEM_NOT_EXIST, ErrorStatus.TARGET_ITEM_NOT_EXIST.getDefaultMessage());

		Sales sales = new Sales();
		sales = salesDAO.getSalesById(salesID, storeID);

		if (sales == null)
			throw new SSPosMobileRequestException(ErrorStatus.TARGET_ITEM_NOT_EXIST, ErrorStatus.TARGET_ITEM_NOT_EXIST.getDefaultMessage());

		// String emailContent =sales.getStore().getId()+"   "+sales.getStore().getStoreName();
		// emailContent +="\n________________________________________"

		List<String> emailContent = new ArrayList<String>();
		emailContent.add(sales.getStore().getId() + "    " + sales.getStore().getStoreName());
		emailContent.add("Shop Email: " + email);
		emailContent.add("\nCustomer Email:\t" + customerEmail);
		emailContent.add("________________________________________________________");
		emailContent.add("Reciept Number :\t" + String.valueOf(sales.getReceiptNumber()));
		emailContent.add("________________________________________________________");
		if (sales.getPaymentType() == 0)
			emailContent.add("Payment Type =\tCash");
		else
			emailContent.add("Payment Type =\tCard");

		List<CartItem> cartItem = new ArrayList<CartItem>();
		cartItem.addAll(sales.getCartItem());

		emailContent.add(" \n");
		emailContent.add("ITEM DETAILS :");
		emailContent.add("-------------------------------------");
		for (CartItem cI : cartItem) {
			if (!(cI.getProductID() == 0))
				emailContent
						.add(cI.getProductCode() + "\t\t" + cI.getProductName() + "\t\t\t" + cI.getQuantity() + "\t\t" + cI.getAmount());
			else
				emailContent.add(cI.getProductCode() + "\t\t" + cI.getCustomAmountDescription() + "\t\t\t" + cI.getQuantity() + "\t\t"
						+ cI.getAmount());
		}

		emailContent.add(" \n");
		emailContent.add(String.valueOf("Subtotal Amount:\t" + sales.getSubTotalAmount()));
		emailContent.add(String.valueOf("Total Amount:\t" + sales.getTotalAmount()));
		if (!(sales.getDiscount() == null))
			emailContent.add(String.valueOf("Discount Amount:\t" + sales.getDiscountAmount()));
		emailContent.add(String.valueOf("Tender Amount:\t" + sales.getTenderAmount()));
		emailContent.add(String.valueOf("Change Amount:\t" + sales.getChangeAmount()));
		if (!(sales.getDiscount() == null))
			emailContent.add(String.valueOf("Discount =\t" + sales.getDiscount().getName()));

		EmailSetup.sendEmail(customerEmail, 104, emailContent);

		return outService;
	}

	@Override
	@Transactional(rollbackFor = Exception.class)
	public JSONServiceDTO getSalesHistory(String email, Long storeID) throws Exception {
		email = email.trim();
		/** Sanity Check **/
		Validators.sanityCheck(storeID);
		Validators.sanityCheck(email);
		PosUser posUser = new PosUser();
		posUser = posUserDAO.getUserByEmail(email);
		if (storeID == 0 || posUser.getStore() == null)
			throw new SSPosMobileRequestException(ErrorStatus.TARGET_ITEM_NOT_EXIST, ErrorStatus.TARGET_ITEM_NOT_EXIST.getDefaultMessage());

		JSONServiceDTO outService = new JSONServiceDTO();
		// get a list of sales from the store
		List<Sales> salesList = salesDAO.getSalesByShopID(storeID);
		List<Sales> refinedSL = new ArrayList<Sales>();

		for (Sales salesIterator : salesList) {
			Sales tempSales = new Sales();
			tempSales.setSalesID(salesIterator.getId());
			tempSales.setReceiptNumber(salesIterator.getReceiptNumber());
			tempSales.setPaymentType(salesIterator.getPaymentType());
			tempSales.setTotalAmount(salesIterator.getTotalAmount());
			tempSales.setTransactionDate(salesIterator.getTransactionDate());
			refinedSL.add(tempSales);
		}
		outService.setSalesHistoryList(refinedSL);

		return outService;
	}

	@Override
	@Transactional(rollbackFor = Exception.class)
	public JSONServiceDTO getSalesHistoryDetails(String email, Long storeID, Long salesID) throws Exception {

		email = email.trim();
		/** Sanity Check **/
		Validators.sanityCheck(email);
		Validators.sanityCheck(storeID);
		Validators.sanityCheck(salesID);

		// StoreID REDUNDENT
		// if (storeID == 0 || storeDAO.getStoreById(storeID) == null)
		// throw new SSPosMobileRequestException(ErrorStatus.TARGET_ITEM_NOT_EXIST, ErrorStatus.TARGET_ITEM_NOT_EXIST.getDefaultMessage());
		if (salesID == 0 || salesDAO.getSalesById(salesID, storeID) == null)
			throw new SSPosMobileRequestException(ErrorStatus.TARGET_ITEM_NOT_EXIST, ErrorStatus.TARGET_ITEM_NOT_EXIST.getDefaultMessage());

		JSONServiceDTO outService = new JSONServiceDTO();
		Sales sales = new Sales();
		sales = salesDAO.getSalesById(salesID, storeID);
		outService.setSalesId(salesID);
		outService.setReceiptNumber(sales.getReceiptNumber());
		outService.setPaymentType(sales.getPaymentType());
		outService.setTransactionDate(sales.getTransactionDate());
		outService.setSubTotalAmount(sales.getSubTotalAmount());
		outService.setTotalAmount(sales.getTotalAmount());
		outService.setDiscountAmount(sales.getDiscountAmount());

		List<CartItem> cartItem = new ArrayList<CartItem>();
		cartItem = sales.getCartItem();
		List<CartItem> temp = new ArrayList<CartItem>();
		for (CartItem cI : cartItem) {
			CartItem tempCI = new CartItem();
			if (cI.getProductID() == 0) {
				tempCI.setCustomAmountDescription(cI.getCustomAmountDescription());
			}

			tempCI.setProductID(cI.getProductID());
			tempCI.setProductCode(cI.getProductCode());
			tempCI.setProductName(cI.getProductName());
			// tempCI.setCustomAmountDescription(cI.getCustomAmountDescription());
			tempCI.setAmount(cI.getAmount());
			tempCI.setQuantity(cI.getQuantity());
			temp.add(tempCI);
		}
		outService.setCartList(temp);

		return outService;
	}

}
