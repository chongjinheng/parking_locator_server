package com.softspace.pos.util;

import java.sql.Date;
import java.util.ArrayList;
import java.util.List;

import com.softspace.pos.DTO.JSONCart;
import com.softspace.pos.DTO.JSONCategory;
import com.softspace.pos.DTO.JSONDTO;
import com.softspace.pos.DTO.JSONDiscount;
import com.softspace.pos.DTO.JSONProduct;
import com.softspace.pos.DTO.JSONSalesHistory;
import com.softspace.pos.DTO.JSONServiceDTO;
import com.softspace.pos.bean.CartItem;
import com.softspace.pos.bean.Category;
import com.softspace.pos.bean.Discount;
import com.softspace.pos.bean.Product;
import com.softspace.pos.bean.Sales;
import com.softspace.pos.bean.Store;

public class JSONConverter {

	public static JSONServiceDTO fromMobile(JSONDTO dto) {
		JSONServiceDTO runningDTO = new JSONServiceDTO();

		/****** INIT ******/
		runningDTO.setDevice(dto.getDevice());
		runningDTO.setPlatform(dto.getPlatform());
		runningDTO.setVersionNo(dto.getVersionNo());
		runningDTO.setPkXML(dto.getPkXML());

		/****** GENERAL ******/
		runningDTO.setServiceName(dto.getServiceName());
		runningDTO.setError(dto.getError());
		runningDTO.setLanguage(dto.getLanguage());
		runningDTO.setSessionKey(dto.getSessionKey());

		/***** IDs *****/
		runningDTO.setStoreId(Long.valueOf(dto.getStoreID()));
		runningDTO.setProductId(Long.valueOf(dto.getProductID()));
		runningDTO.setCategoryId(Long.valueOf(dto.getCategoryID()));
		runningDTO.setProductCategoryReferenceId(Long.valueOf(dto.getProductCategoryReferenceID()));
		runningDTO.setCartItemId(Long.valueOf(dto.getCartItemID()));
		runningDTO.setDiscountId(Long.valueOf(dto.getDiscountID()));
		runningDTO.setForgotPassSessionId(Long.valueOf(dto.getForgotPassSessionID()));
		runningDTO.setSalesId(Long.valueOf(dto.getSalesID()));

		/****** ACTIVATION/LOGIN ******/
		runningDTO.setEmail(dto.getUserEmail());
		runningDTO.setStoreName(dto.getStoreName());
		runningDTO.setPassword(dto.getPassword());
		runningDTO.setNewPassword(dto.getNewPassword());
		runningDTO.setIsForceChangePassword(dto.getIsForceChangePassword());
		runningDTO.setLoginMode(dto.getLoginMode());
		// unused
		runningDTO.setUserProfile(dto.getUserProfile());

		/**** STORE & INVENTORY ****/
		runningDTO.setStoreImage(dto.getStoreImage());
		runningDTO.setAction(dto.getAction());

		// List of productID need to convert 1 by 1 from
		List<String> tempPIDList = dto.getProductIDList();
		List<Long> pIDList = new ArrayList<Long>();
		for (String it : tempPIDList) {
			pIDList.add(Long.valueOf(it));
		}
		runningDTO.setProductIDList(pIDList);

		// TODO check
		// dig from Product List
		if (dto.getProductList().size() > 0) {
			List<Product> tempProducts = new ArrayList<Product>();
			List<JSONProduct> jP = dto.getProductList();
			for (JSONProduct jPit : jP) {
				Product product = new Product();
				product.setId(Long.valueOf(jPit.getId()));
				product.setCode(jPit.getCode());
				product.setName(jPit.getName());
				product.setDescription(jPit.getDescription());
				Double tempPrice = (Double.valueOf(jPit.getPrice()) * 100);
				Long tempPrice1 = tempPrice.longValue();
				product.setPrice(tempPrice1);
				product.setThumbnail(jPit.getThumbnail());

				List<String> tempCategoryList = jPit.getCategoryIDList();
				List<Long> tempRealCategoryList = new ArrayList<Long>();

				for (String tCLit : tempCategoryList) {
					tempRealCategoryList.add(Long.valueOf(tCLit));
				}
				product.setCategoryIDList(tempRealCategoryList);

				tempProducts.add(product);
			}
			runningDTO.setProductList(tempProducts);
		}

		// dig category list

		if (dto.getCategoryList().size() > 0) {
			List<Category> tempCategoryList = new ArrayList<Category>();
			List<JSONCategory> tempCL = dto.getCategoryList();

			for (JSONCategory jC : tempCL) {
				Category category = new Category();
				category.setId(Long.valueOf(jC.getId()));
				category.setName(jC.getName());
				tempCategoryList.add(category);
			}
			runningDTO.setCategoryList(tempCategoryList);
		}

		// dig Discount Package list
		if (dto.getDiscountPackageList().size() > 0) {
			List<Discount> tempDiscountPackageList = new ArrayList<Discount>();
			List<JSONDiscount> tempDL = dto.getDiscountPackageList();

			for (JSONDiscount jD : tempDL) {
				Discount discount = new Discount();
				discount.setId(Long.valueOf(jD.getId()));
				discount.setName(jD.getName());
				discount.setType(jD.getType());
				discount.setValue(Double.valueOf(jD.getValue()));
				tempDiscountPackageList.add(discount);
			}
			runningDTO.setDiscountPackageList(tempDiscountPackageList);
		}

		runningDTO.setEmail(dto.getEmail());

		// dig Cart list
		if (dto.getCartList().size() > 0) {
			List<CartItem> tempCartList = new ArrayList<CartItem>();
			List<JSONCart> tempCL = dto.getCartList();

			for (JSONCart jCL : tempCL) {
				CartItem cartItem = new CartItem();
				cartItem.setProductID(Long.valueOf(jCL.getProductID()));
				cartItem.setCustomAmountDescription(jCL.getCustomAmountDescription());
				;
				Double tempCA = Double.valueOf(jCL.getCustomAmount());
				cartItem.setCustomAmount(tempCA.longValue() * 100);
				cartItem.setQuantity(jCL.getQuantity());
				;
				tempCartList.add(cartItem);
			}
			runningDTO.setCartList(tempCartList);
		}

		runningDTO.setPaymentType(dto.getPaymentType());

		Double tempSTA = Double.valueOf(dto.getSubTotalAmount());
		runningDTO.setSubTotalAmount(tempSTA.longValue() * 100);

		Double tempTA = Double.valueOf(dto.getTotalAmount());
		runningDTO.setTotalAmount(tempTA.longValue() * 100);

		Double tempDA = Double.valueOf(dto.getDiscountAmount());
		runningDTO.setDiscountAmount(tempDA.longValue() * 100);

		Double tempTenA = Double.valueOf(dto.getTenderAmount());
		runningDTO.setTenderAmount(tempTenA.longValue() * 100);

		Double tempCA = Double.valueOf(dto.getChangeAmount());
		runningDTO.setChangeAmount(tempCA.longValue() * 100);

		Discount tempDiscountPackage = new Discount();
		tempDiscountPackage.setId(Long.valueOf(dto.getDiscountPackage().getId()));
		tempDiscountPackage.setName(dto.getDiscountPackage().getName());
		tempDiscountPackage.setType(dto.getDiscountPackage().getType());
		tempDiscountPackage.setValue(Double.valueOf(dto.getDiscountPackage().getValue()));

		runningDTO.setDiscountPackage(tempDiscountPackage);

		runningDTO.setReceiptNumber(dto.getReceiptNumber());
		runningDTO.setTransactionDate(Date.valueOf(dto.getTransactionDate()));

		return runningDTO;
	}

	public static JSONDTO toMobile(JSONServiceDTO dto) {
		JSONDTO runningDTO = new JSONDTO();

		/*** INIT ***/
		runningDTO.setPkXML(dto.getPkXML());
		runningDTO.setError(dto.getError());
		runningDTO.setLanguage(dto.getLanguage());
		runningDTO.setSessionKey(dto.getSessionKey());
		/*** IDs ***/
		runningDTO.setStoreID(dto.getStoreId().toString());
		runningDTO.setSalesID(dto.getSalesId().toString());
		/*** LOGIN ***/
		runningDTO.setLoginMode(dto.getLoginMode());

		Store store = dto.getUserProfile();
		store.setStoreName(dto.getStoreName());
		store.setStoreImage(dto.getStoreImage());
		runningDTO.setUserProfile(store);

		/*** STORE & INVENTORY ***/
		if (dto.getProductList().size() > 0) {
			List<JSONProduct> jsonProducts = new ArrayList<JSONProduct>();
			for (Product pro : dto.getProductList()) {
				JSONProduct jsonProduct = new JSONProduct();
				jsonProduct.setId(pro.getId().toString());
				jsonProduct.setCode(pro.getCode());
				jsonProduct.setName(pro.getName());
				jsonProduct.setPrice(pro.getPrice().toString());
				jsonProduct.setThumbnail(pro.getThumbnail());

				if (pro.getCategoryIDList().size() > 0) {
					List<String> tempCatID = new ArrayList<String>();
					for (Long catID : pro.getCategoryIDList()) {
						tempCatID.add(catID.toString());
					}
					jsonProduct.setCategoryIDList(tempCatID);

					jsonProducts.add(jsonProduct);
				}
			}
			runningDTO.setProductList(jsonProducts);
		}

		if (dto.getCategoryList().size() > 0) {
			List<JSONCategory> jsonCategories = new ArrayList<JSONCategory>();
			for (Category cat : dto.getCategoryList()) {
				JSONCategory jsonCategory = new JSONCategory();
				jsonCategory.setId(cat.getId().toString());
				jsonCategory.setName(cat.getName());

				if (cat.getProductIds().size() > 0) {
					List<String> tempProID = new ArrayList<String>();
					for (Long proID : cat.getProductIds()) {
						tempProID.add(proID.toString());
					}
					jsonCategory.setProductIDList(tempProID);
				}
			}
			runningDTO.setCategoryList(jsonCategories);
		}

		if (dto.getDiscountList().size() > 0) {
			List<JSONDiscount> jsonDiscounts = new ArrayList<JSONDiscount>();
			for (Discount dis : dto.getDiscountList()) {
				JSONDiscount jsonDiscount = new JSONDiscount();
				jsonDiscount.setId(dis.getId().toString());
				jsonDiscount.setName(dis.getName());
				jsonDiscount.setType(dis.getType());
				jsonDiscount.setValue(dis.getValue().toString());
			}
			runningDTO.setDiscountList(jsonDiscounts);
		}

		runningDTO.setNewCategoryID(dto.getNewCategoryID().toString());
		runningDTO.setNewProductID(dto.getNewProductID().toString());
		runningDTO.setNewDiscountID(dto.getNewDiscountID().toString());

		/*** SALES ***/
		if (dto.getCartList().size() > 0) {
			List<JSONCart> jsonCarts = new ArrayList<JSONCart>();
			for (CartItem cart : dto.getCartList()) {
				JSONCart jsonCart = new JSONCart();
				jsonCart.setProductID(cart.getProductID().toString());
				jsonCart.setProductCode(cart.getProductCode());
				jsonCart.setCustomAmountDescription(cart.getCustomAmountDescription());
				jsonCart.setQuantity(cart.getQuantity());

				Double tempSubTotal = Long.valueOf(cart.getSubTotal()).doubleValue();
				tempSubTotal /= 100;
				jsonCart.setSubtotal(tempSubTotal.toString());
			}
			runningDTO.setCartList(jsonCarts);
		}

		runningDTO.setPaymentType(dto.getPaymentType());

		Double tempSubTotalAmount = Long.valueOf(dto.getSubTotalAmount()).doubleValue();
		tempSubTotalAmount /= 100;
		runningDTO.setSubTotalAmount(tempSubTotalAmount.toString());

		Double tempTotalAmount = Long.valueOf(dto.getTotalAmount()).doubleValue();
		tempTotalAmount /= 100;
		runningDTO.setTotalAmount(tempTotalAmount.toString());

		Double tempDiscountAmount = Long.valueOf(dto.getDiscountAmount()).doubleValue();
		tempDiscountAmount /= 100;
		runningDTO.setDiscountAmount(tempDiscountAmount.toString());

		runningDTO.setReceiptNumber(dto.getReceiptNumber());

		if (dto.getSalesHistoryList().size() > 0) {
			List<JSONSalesHistory> jsonSalesHistories = new ArrayList<JSONSalesHistory>();
			for (Sales sales : dto.getSalesHistoryList()) {
				JSONSalesHistory jsonSalesHistory = new JSONSalesHistory();
				jsonSalesHistory.setSalesID(sales.getSalesID().toString());
				jsonSalesHistory.setReceiptNumber(sales.getReceiptNumber());
				jsonSalesHistory.setPaymentType(sales.getPaymentType());

				Double tempTotalAmount1 = Long.valueOf(sales.getTotalAmount()).doubleValue();
				tempTotalAmount1 /= 100;
				jsonSalesHistory.setTotalAmount(tempTotalAmount1.toString());

				jsonSalesHistory.setTransactionDate(sales.getTransactionDate().toString());
			}
			runningDTO.setSalesHistoryList(jsonSalesHistories);
		}

		runningDTO.setTransactionDate(dto.getTransactionDate().toString());

		return runningDTO;
	}
}
